"""
Script to edit all the drawdown solutions and add company info.

Uses data/sorted.json generated by semantic_textual_similarity.py
"""
# TODO: currently manually downloading docs from climate tech handbook, automation?

import json
import re

from jinja2 import Template


def toggle_template_for_listing_companies():
    """
    Taken from: https://docusaurus.io/docs/markdown-features#details
    """
    toggle_template = Template(
        """<details>
        <summary>List of companies working in this solution...</summary>
         <em>Note: this is an experimental feature. Accuracy not guaranteed</em>
        <div>
            <ul>
             {% for item in companies_list %}
                <li><a href="{{item.website}}">{{item.name}}</a></li>
            {% endfor %}
            </ul>
        </div>
        </details>"""
    )

    return toggle_template


def template_for_drawdown_solution_jobs():
    solution_jobs_template = Template(
        """
:::company
  #### [View open jobs in this Solution](https://climatebase.org/jobs?l=&q=&drawdown_solutions={{solution}})
:::
"""
    )
    return solution_jobs_template


def template_for_top_companies():
    top_companies_template = Template(
        """
        :::company
          #### Top companies working in this solution \n{{bullet_list_companies}}
        :::
        """
    )
    return top_companies_template


def add_content(existing_content, new_content, file_path):
    # Find the position in the existing content where you want to insert the new content
    # Let's assume you want to insert before the heading "## Overview"
    heading_to_insert_before = "## Overview"
    insert_position = existing_content.find(heading_to_insert_before)

    if insert_position != -1:
        # Create the updated content by inserting the new content before the heading
        updated_content = (
            existing_content[:insert_position]
            + new_content
            + "\n"  # Add newlines to separate the new content from the heading
            + "\n"
            + existing_content[insert_position:]
        )
        # Write the updated content back to the Markdown file
        with open(file_path, "w") as f:
            f.write(updated_content)

    else:
        print(f"Heading '{heading_to_insert_before}' not found in the {file_path}.")


def delete_toggle_content(existing_content, file_path):
    """
    Deletes content between <details> </details>
    """
    pattern = r"(\n*)<details>(.*?)</details>"
    # Use re.sub() to replace matched patterns with an empty string
    cleaned_text = re.sub(pattern, "", existing_content, flags=re.DOTALL)
    # Write the updated content back to the Markdown file
    with open(file_path, "w") as f:
        f.write(cleaned_text)
    return cleaned_text


def delete_company_content(selected_header, existing_content, file_path):
    """
    Deletes content between :::company :::
    """
    # Define the pattern to match :::company sections with headers
    pattern = r"(\n*):::company(.*?)(?:::|\n:::|\Z)"
    # Use re.sub() to remove the section with the selected header
    cleaned_text = re.sub(
        pattern,
        lambda match: match.group() if selected_header not in match.group() else "",
        existing_content,
        flags=re.DOTALL,
    )
    with open(file_path, "w") as f:
        f.write(cleaned_text)
    return cleaned_text


if __name__ == "__main__":
    json_file_path = "data/sorted.json"
    with open(json_file_path, "r") as f:
        data = json.load(f)

    # Use the flag based on the content
    bullet_list = False
    toggle_companies = False
    drawdown_solution_jobs = True

    for k, v in data.items():
        formatted_string = k.lower().replace(" ", "-")
        file_name = f"solution-{formatted_string}"
        file_path = f"data/docs/{file_name}.md"

        try:
            # Open the Markdown file and read its content
            with open(file_path, "r") as f:
                existing_content = f.read()
        except:
            print(f"{file_path} not found.")
            continue

        else:
            if bullet_list:
                selected_header = "#### Top companies working in this solution"
                # Create the bullet list content of top 3 companies using Markdown syntax
                # TODO: How(what Data) to Rank?
                bullet_list_companies = "\n".join(
                    [f"- [{item['name']}]({item['website']})" for item in v[:3]]
                )
                cleaned_content = delete_company_content(
                    selected_header, existing_content
                )
                add_content(cleaned_content, bullet_list_companies, file_path)

            if toggle_companies:
                cleaned_content = delete_toggle_content(existing_content, file_path)
                solution_toggle_template = toggle_template_for_listing_companies()
                new_content = solution_toggle_template.render(companies_list=v)
                add_content(cleaned_content, new_content, file_path)

            if drawdown_solution_jobs:
                selected_header = "#### [View open jobs in this Solution]"
                cleaned_content = delete_company_content(
                    selected_header, existing_content, file_path
                )
                solution = k.replace(" ", "+")
                drawdown_solution_jobs_template = template_for_drawdown_solution_jobs()
                new_content = drawdown_solution_jobs_template.render(solution=solution)
                add_content(cleaned_content, new_content, file_path)
